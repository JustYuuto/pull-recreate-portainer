name: 'Pull & Recreate to Portainer'
description: 'Pull image and recreate container in Portainer. Useful for updating images.'
author: 'Yuuto'
branding:
  icon: 'upload-cloud'
  color: 'blue'

inputs:
  portainer_url:
    description: 'Portainer URL'
    required: true
  portainer_access_token:
    description: 'Portainer API key'
    required: true
  container_name:
    description: 'Container name'
    required: true
  image_name:
    description: 'Image name to pull.'
    required: true
  registry_auth:
    description: 'X-Registry-Auth header'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Pull image
      run: |
        curl -X POST -H "X-Api-Key: ${{ inputs.portainer_access_token }}" -H "X-Registry-Auth: $(echo ${{ inputs.portainer_access_token }} | base64)" \
          "${{ inputs.portainer_url }}/api/endpoints/3/docker/v1.41/images/create?fromImage=${{ inputs.image_name }}"
      shell: bash
  
    - name: Get containers list
      run: |
        CONTAINER_ID=$(curl -s -H "X-Api-Key: ${{ inputs.portainer_access_token }}" \
          "${{ inputs.portainer_url }}/api/endpoints/3/docker/v1.41/containers/json?all=true" | \
          jq -r '.[] | select(.Names[0] == "/${{ inputs.container_name }}") | .Id')
        echo "CONTAINER_ID=$CONTAINER_ID" >> $GITHUB_ENV
      shell: bash

    - name: Recreate container
      if: env.CONTAINER_ID != ''
      run: |
        curl -X POST -H "X-Api-Key: ${{ inputs.portainer_access_token }}" -H "Content-Type: application/json" \
        -d '{"PullImage":false}' \
        "${{ inputs.portainer_url }}/api/docker/3/containers/${{ env.CONTAINER_ID }}/recreate"
      shell: bash
